=========================
 The ``Rectangle`` Class
=========================

Using ``Rectangle``
-------------------

Defines a rectangle with ``width`` and ``height``,
with some rectangle functionalities such as ``area``,
``perimeter``...etc.

Setup
=====

::

	>>> Rectangle = __import__('4-rectangle').Rectangle

Create an object
================

::

	>>> rect = Rectangle(2, 4)

Testing rectangle area
======================

Should print the area of the rectangle.

::

	>>> rect.area()
	8
	>>> rect.width = 3
	>>> rect.height = 0
	>>> rect.area()
	0

Testing rectangle perimeter
===========================

Should print the perimeter of the rectangle.

::

	>>> rect.perimeter()
	0
	>>> rect.height = 3
	>>> rect.perimeter()
	12

Printing the rectangle
======================

Should print ``#``s shaping a rectangle.

::

	>>> print(rect)
	###
	###
	###
	>>> r = Rectangle(0, 4)
	>>> print(r)
	<BLANKLINE>

Testing ``repr()`` of the rectangle
===================================

Should return a representation of the rectangle to be recreated.

::

	>>> new = eval(repr(rect))
	>>> new is rect
	False
	>>> type(new) is type(rect)
	True
	>>> new.area() == rect.area()
	True

Exceptions
==========

Should raise ``TypeError()`` if the obj values are not integers,
and raises ``ValueError()`` if the value are below 0.

::

	>>> rect = Rectangle(-1, 3)
	Traceback (most recent call last):
		...
	ValueError: width must be >= 0
	>>> rect = Rectangle(1, -3)
	Traceback (most recent call last):
		...
	ValueError: height must be >= 0
	>>> rect = Rectangle(1, 3)
	>>> rect.width = "h"
	Traceback (most recent call last):
		...
	TypeError: width must be an integer
	>>> rect.height = 4.2
	Traceback (most recent call last):
		...
	TypeError: height must be an integer
