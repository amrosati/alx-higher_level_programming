=====================================
 Testing ``2-matrix_divided`` module
=====================================

Using ``matrix_divided()``
--------------------------

Divides all elements of ``matrix`` by givin ``div`` divisior.

SetUp
======

::

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Normal Usage
============

It should create another matrix
and doesn't affect the original matrix.

::

	>>> matrix = [ [1, 2, 3], [4, 5, 6] ]
	>>> n_matrix = matrix_divided(matrix, 3)

	>>> n_matrix[0][0] == 0.33
	True

	>>> n_matrix == matrix
	False

	>>> n_matrix[1][0] == 1.33
	True

Zero Division
==============

The function should raise a ``ZeroDivisionError`` exception.

::

	>>> n_matrix = matrix_divided(matrix, 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

Wrong Types
============

It should raise a ``TypeError`` if on element doesn't
match the required type.

::

	>>> matrix.append([5, 6])
	>>> matrix_divided(matrix, 1)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

	>>> matrix = [4, 43, 5]
	>>> matrix_divided(matrix, 1)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [ [1.2, 'f'], [1, 1] ]
	>>> matrix_divided(matrix, 1)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = 65
	>>> matrix_divided(matrix, 65)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

None Value
===========

If ``matrix`` is ``None`` raises a ``TypeError``

::

	>>> matrix_divided(None, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
